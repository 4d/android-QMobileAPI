variables:
  ANDROID_COMPILE_SDK: "29"
  ANDROID_SDK_TOOLS: "4333796"
  ANDROID_BUILD_TOOLS: "29.0.2"
  AVD_SDK: "29"
  AVD_TAG: "google_apis_playstore"
  AVD_ARCH: "x86"


stages:
  - lint
  - build
  - test

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - chmod +x ./gradlew

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches

lint:
  stage: lint
  script:
    - rm -fr build
    - ./gradlew ktlintFormat --console=rich
    - ./gradlew detekt --console=rich
  artifacts:
    name: "reports_${CI_PROJECT_NAME}_${CI_BUILD_REF_NAME}"
    when: on_failure
    expire_in: 4 days
    paths:
    - androidmobileapi/build/reports/

build:
  stage: build
  script:
    - ./gradlew clean assemble --console=rich
  artifacts:
    paths:
     - androidmobileapi/build/outputs/

unitTests:
  stage: test
  script:
    - ./gradlew -x lint check --console=rich


# OSX PLATFORM

.download_sdk_osx: &download_sdk_osx |
  echo "Starting download_sdk_osx"
  curl -o android-sdk.zip https://dl.google.com/android/repository/sdk-tools-darwin-${ANDROID_SDK_TOOLS}.zip

# LINUX PLATFORM

.download_sdk_linux: &download_sdk_linux |
  echo "Starting download_sdk_linux"
  curl -o android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip

.build_sdk: &build_sdk |
  echo "Starting build_sdk"
  unzip -q android-sdk.zip -d android-sdk
  rm android-sdk.zip
  echo y | android-sdk/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
  echo y | android-sdk/tools/bin/sdkmanager "platform-tools" >/dev/null
  echo y | android-sdk/tools/bin/sdkmanager "tools" >/dev/null
  echo y | android-sdk/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
  export ANDROID_HOME=$PWD/android-sdk
  export ANDROID_SDK_HOME=$PWD/android-sdk
  export ANDROID_SDK_ROOT=$PWD/android-sdk
  export ANDROID_AVD_HOME=~/.android/avd
  export PATH=$PATH:$ANDROID_HOME/platform-tools/
  export PATH=$PATH:$ANDROID_HOME/tools/
  export PATH=$PATH:$ANDROID_HOME/tools/bin/
  export PATH=$PATH:$ANDROID_AVD_HOME
  export AVD_PACKAGE="system-images;android-${AVD_SDK};${AVD_TAG};${AVD_ARCH}"

.run_unit_tests: &run_unit_tests |
  echo "Starting run_unit_tests"
  chmod +x android-wait-for-emulator
  echo y | sdkmanager "$AVD_PACKAGE"
  echo y | sdkmanager --update
  #echo y | sdkmanager "emulator" > /dev/null;
  #echo y | sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" > /dev/null
  adb devices | grep emulator | cut -f1 | while read line; do adb -s $line emu kill; done
  if ! avdmanager list avd | grep "Name. avd$AVD_SDK"; then
    set -x;
    rm -rf ~/.android/avd
    #echo y | sdkmanager "$AVD_PACKAGE" > /dev/null;
    echo no | avdmanager create avd --name avd$AVD_SDK --tag "$AVD_TAG" --package "$AVD_PACKAGE" --device "Nexus 5";
    avdmanager list avd;
    set +x;
  fi
  #adb start-server
  ${ANDROID_HOME}/emulator/emulator -avd avd$AVD_SDK -no-window -no-audio &
  ./android-wait-for-emulator
  #adb devices
  #adb shell settings put global window_animation_scale 0 &
  #adb shell settings put global transition_animation_scale 0 &
  #adb shell settings put global animator_duration_scale 0 &
  #adb shell input keyevent 82 &
  ./gradlew cAT

instrumentationTestsOSX:
  stage: test
  script:
    - *download_sdk_osx
    - *build_sdk
    #- *run_unit_tests
  tags:
    - osx
  artifacts:
    name: "reports_${CI_PROJECT_NAME}_${CI_BUILD_REF_NAME}"
    when: on_failure
    expire_in: 4 days
    paths:
      - androidmobileapi/build/reports/androidTests/connected/

instrumentationTestsLinux:
  stage: test
  script:
    - *download_sdk_linux
    - *build_sdk
    #- *run_unit_tests
  tags:
    - linux
  artifacts:
    name: "reports_${CI_PROJECT_NAME}_${CI_BUILD_REF_NAME}"
    when: on_failure
    expire_in: 4 days
    paths:
      - androidmobileapi/build/reports/androidTests/connected/