apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply from: "$rootDir/buildscripts/ktlint.gradle"
apply from: "$rootDir/buildscripts/testlog.gradle"
apply from: "$rootDir/buildscripts/detekt.gradle"
apply from: "$rootDir/buildscripts/jacoco.gradle"
apply from: "https://raw.githubusercontent.com/JakeWharton/SdkSearch/master/gradle/projectDependencyGraph.gradle"

dependencies {

    // Kotlin
    implementation Libs.kotlin_stdlib

    // RX
    implementation Libs.rxjava
    implementation Libs.rxandroid

    // OkHttp
    implementation Libs.okhttp
    implementation Libs.okhttp_logging_intercepter

    // Retrofit
    implementation Libs.retrofit
    implementation Libs.retrofit_converter_gson
    implementation Libs.retrofit_adapter_rxjava2

    // Log
    implementation Libs.timber

    // SharedPreferences utils
    implementation Libs.androidx_preference_ktx

    // Unit tests
    testImplementation Libs.androidx_junit
    testImplementation Libs.okhttp_mockwebserver
    testImplementation Libs.junit
    testImplementation Libs.robolectric
    testImplementation Libs.androidx_core_testing
    androidTestImplementation Libs.androidx_core_testing
    androidTestImplementation Libs.androidx_junit
}

def libraryGroupId = 'com.qmarciset.androidmobileapi'
def libraryArtifactId = 'androidmobileapi'
def libraryVersion = '0.0.1'
def buildVariant = 'release'

publishing {
    publications {
        aar(MavenPublication) {
            groupId libraryGroupId
            version libraryVersion

            artifactId libraryArtifactId
            artifact("$buildDir/outputs/aar/${artifactId}-${buildVariant}.aar")

            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.getByName("${buildVariant}CompileClasspath").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.moduleGroup)
                    dependency.appendNode('artifactId', it.moduleName)
                    dependency.appendNode('version', it.moduleVersion)
                }
            }
        }
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"
    publish {
        repository {
            repoKey = artifactory_repoKey
            username = artifactory_user
            password = artifactory_password
        }
        defaults {
            publications('aar')
            publishArtifacts = true
            publishPom = true
            properties = ['qa.level': 'basic', 'q.os': 'android', 'dev.team': 'core']
        }
    }
}

task generateMySources(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}
task addMySourcesToAar(type: Jar) {
    archiveName "${libraryArtifactId}WithSources.aar"
    destinationDir file("build")
    from zipTree("build/outputs/aar/${libraryArtifactId}-${buildVariant}.aar")
    from fileTree("build").include("libs/${libraryArtifactId}-sources.jar")
}
afterEvaluate { project ->
    project.tasks.preBuild.dependsOn generateMySources
    project.addMySourcesToAar.dependsOn build
}
artifacts {
    archives addMySourcesToAar.archivePath
}